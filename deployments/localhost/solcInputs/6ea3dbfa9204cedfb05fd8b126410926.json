{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/taskManager.sol": {
      "content": "//SPDX-License-Identifier:MIT\npragma solidity ^0.8.8;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\ncontract taskManager is Ownable{\n    enum TaskStatus {Pending,Completed}\n    struct Task{\n        uint id;\n        string title;\n        string description;\n        TaskStatus status;\n        address owner;\n    }\n    uint private taskCounter;\n    mapping(uint=>Task) private tasks;\n\n    event TaskCreated(uint taskId,string title,string description,address owner);\n    event TaskUpdated(uint taskId,string title,string description,TaskStatus status);\n    event TaskDeleted(uint taskId);\n    constructor(address initialOwner) Ownable(initialOwner) {\n        taskCounter = 0;\n    }\n\n    modifier onlyTaskOwner(uint _taskId){\n        require(tasks[_taskId].owner==msg.sender,\"Not Task Owner\");\n        _;\n    }\n    function addTask(string memory _title,\n    string memory _description\n    )external{\n        taskCounter++;\n        tasks[taskCounter]=Task(taskCounter,\n        _title,\n        _description,\n        TaskStatus.Pending,\n        msg.sender);\n        emit TaskCreated(taskCounter, _title, _description, msg.sender);\n    }\n    function markTaskCompleted(uint _taskId) external onlyTaskOwner(_taskId){\n        tasks[_taskId].status=TaskStatus.Completed;\n\n        emit TaskUpdated(_taskId,\n        tasks[_taskId].title,\n        tasks[_taskId].description,\n        TaskStatus.Completed\n        );\n    }\n    function editTask(uint _taskId,string memory _title, string memory _description) external onlyTaskOwner(_taskId){\n        Task storage task= tasks[_taskId];\n        task.title=_title;\n        task.description=_description;\n        emit TaskUpdated(\n            _taskId,\n            _title,\n            _description,\n            task.status\n        );\n\n    }\n    function deleteTask(uint _taskId) external onlyTaskOwner(_taskId){\n        delete tasks[_taskId];\n        emit TaskDeleted(_taskId);\n    }\n    \n    function getTask() external  view  returns(Task[] memory){\n        uint count=0;\n\n        for(uint i=1;i<=taskCounter;i++){\n            if(tasks[i].owner==msg.sender){\n                count++;\n            }\n        }\n        Task[] memory finalTasks= new Task[](count);\n        uint index=0;\n\n        for(uint i=1;i<=taskCounter;i++){\n            if(tasks[i].owner==msg.sender){\n                finalTasks[index]=tasks[i];\n                index++;\n            }\n        }\n        return finalTasks;\n\n        \n    }\n    function getTaskCounter() external view returns (uint){\n        return taskCounter;\n    }\n\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}